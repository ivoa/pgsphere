CREATE TYPE smoc;

CREATE FUNCTION smoc_in(cstring)
	RETURNS smoc
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION smoc_out(smoc)
	RETURNS cstring
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	IMMUTABLE STRICT PARALLEL SAFE;

CREATE TYPE smoc (
	input = smoc_in,
	output = smoc_out,
	delimiter = ';',
	internallength = VARIABLE,
	alignment = double,
	storage = EXTERNAL
);

CREATE FUNCTION moc_debug()
	RETURNS text
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION set_smoc_output_type(integer)
	RETURNS cstring
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION max_order(smoc)
	RETURNS integer
	AS 'MODULE_PATHNAME', 'smoc_order'
	LANGUAGE C
	IMMUTABLE STRICT PARALLEL SAFE;

CREATE FUNCTION healpix_subset_smoc(bigint, smoc)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION healpix_not_subset_smoc(bigint, smoc)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION smoc_superset_healpix(smoc, bigint)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION smoc_not_superset_healpix(smoc, bigint)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION spoint_subset_smoc(spoint, smoc)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION spoint_not_subset_smoc(spoint, smoc)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION smoc_superset_spoint(smoc, spoint)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE FUNCTION smoc_not_superset_spoint(smoc, spoint)
	RETURNS bool
	AS 'MODULE_PATHNAME'
	LANGUAGE C
	STRICT PARALLEL SAFE;

CREATE OPERATOR <@ (
   LEFTARG    = bigint,
   RIGHTARG   = smoc,
   PROCEDURE  = healpix_subset_smoc,
   COMMUTATOR = '@>',
   NEGATOR    = '!<@',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

CREATE OPERATOR !<@ (
   LEFTARG    = bigint,
   RIGHTARG   = smoc,
   PROCEDURE  = healpix_not_subset_smoc,
   COMMUTATOR = '!@>',
   NEGATOR    = '<@',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

CREATE OPERATOR @> (
   LEFTARG    = smoc,
   RIGHTARG   = bigint,
   PROCEDURE  = smoc_superset_healpix,
   COMMUTATOR = '<@',
   NEGATOR    = '!@>',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

CREATE OPERATOR !@> (
   LEFTARG    = smoc,
   RIGHTARG   = bigint,
   PROCEDURE  = smoc_not_superset_healpix,
   COMMUTATOR = '!<@',
   NEGATOR    = '@>',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

CREATE OPERATOR <@ (
   LEFTARG    = spoint,
   RIGHTARG   = smoc,
   PROCEDURE  = spoint_subset_smoc,
   COMMUTATOR = '@>',
   NEGATOR    = '!<@',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

CREATE OPERATOR !<@ (
   LEFTARG    = spoint,
   RIGHTARG   = smoc,
   PROCEDURE  = spoint_not_subset_smoc,
   COMMUTATOR = '!@>',
   NEGATOR    = '<@',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

CREATE OPERATOR @> (
   LEFTARG    = smoc,
   RIGHTARG   = spoint,
   PROCEDURE  = smoc_superset_spoint,
   COMMUTATOR = '<@',
   NEGATOR    = '!@>',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

CREATE OPERATOR !@> (
   LEFTARG    = smoc,
   RIGHTARG   = spoint,
   PROCEDURE  = smoc_not_superset_spoint,
   COMMUTATOR = '!<@',
   NEGATOR    = '@>',
   RESTRICT   = contsel,
   JOIN       = contjoinsel
);

